!function(t){var e={};function n(i){if(e[i])return e[i].exports;var a=e[i]={i:i,l:!1,exports:{}};return t[i].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)n.d(i,a,function(e){return t[e]}.bind(null,a));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";function i(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}n.r(e);var a=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,n,a;return e=t,a=[{key:"norm",value:function(t,e,n){return(t-e)/(n-e)}},{key:"lerp",value:function(t,e,n){return(n-e)*t+e}},{key:"map",value:function(e,n,i,a,r){return t.lerp(t.norm(e,n,i),a,r)}},{key:"clamp",value:function(t,e,n){return Math.min(Math.max(t,Math.min(e,n)),Math.max(e,n))}},{key:"distance",value:function(t,e){var n=e.x-t.x,i=e.y-t.y;return Math.sqrt(n*n+i*i)}},{key:"distanceXY",value:function(t,e,n,i){var a=n-t,r=i-e;return Math.sqrt(a*a+r*r)}},{key:"circleCollision",value:function(e,n){return t.distance(e,n)<=e.radius+n.radius}},{key:"circlePointCollision",value:function(e,n,i){return t.distanceXY(e,n,i.x,i.y)<i.radius}},{key:"pointInRect",value:function(e,n,i){return t.inRange(e,i.x,i.x+i.width)&&t.inRange(n,i.y,i.y+i.height)}},{key:"inRange",value:function(t,e,n){return t>=Math.min(e,n)&&t<=Math.max(e,n)}},{key:"rangeIntersect",value:function(t,e,n,i){return Math.max(t,e)>=Math.min(n,i)&&Math.min(t,e)<=Math.max(n,i)}},{key:"rectIntersect",value:function(e,n){return t.rangeIntersect(e.x,e.x+e.width,n.x,n.x+n.width)&&t.rangeIntersect(e.y,e.y+e.height,n.y,n.y+n.height)}},{key:"degreesToRads",value:function(t){return t/180*Math.PI}},{key:"radsToDegrees",value:function(t){return 180*t/Math.PI}},{key:"randomRange",value:function(t,e){return t+Math.random()*(e-t)}},{key:"randomInt",value:function(t,e){return Math.floor(t+Math.random()*(e-t+1))}},{key:"randomDist",value:function(e,n,i){for(var a=0,r=0;r<i;r+=1)a+=t.randomRange(e,n);return a/i}},{key:"randomColor",value:function(t){return t[Math.floor(Math.random()*t.length)]}}],(n=null)&&i(e.prototype,n),a&&i(e,a),t}();function r(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}var o={},s=["#645f5a"];window.addEventListener("mousemove",(function(t){o.x=t.clientX,o.y=t.clientY}));var h=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.canvas=document.querySelector("#canvas"),this.ctx=canvas.getContext("2d"),this.color=a.randomColor(s),this.x=this.canvas.width/2,this.y=this.canvas.height/2,this.x2=Math.random()*this.canvas.width,this.y2=Math.random()*this.canvas.height,this.radius=2.5*Math.random()+1,this.vx=0,this.vy=0,this.friction=.05*Math.random()+.94,this.speed=30,this.angle=2*Math.PI*Math.random(),this.rotationSpeed=.001*Math.random()+.0015,this.distancex=a.randomDist(this.canvas.width/12,this.canvas.width/6+120,2),this.distancey=a.randomDist(this.canvas.height/12,this.canvas.height/1.8+200,6),this.x3=Math.cos(this.angle)*this.distancex+this.canvas.width/2,this.y3=Math.sin(this.angle)*this.distancey+this.canvas.height/2,this.rotationSpeed=.001*Math.random()+.0015,this.x4=e,this.y4=n}var e,n,i;return e=t,(n=[{key:"load",value:function(){this.vx=(this.x2-this.x)/this.speed,this.vy=(this.y2-this.y)/this.speed,this.x+=this.vx,this.y+=this.vy}},{key:"circle",value:function(){this.angle+=this.rotationSpeed,this.vx=(this.x3-this.x)/this.speed,this.vy=(this.y3-this.y)/this.speed,this.x+=this.vx,this.y+=this.vy,this.x3=Math.cos(this.angle)*this.distancex+this.canvas.width/2,this.y3=Math.sin(this.angle)*this.distancey+this.canvas.height/2}},{key:"font",value:function(){this.vx=(this.x4-this.x)/this.speed,this.vy=(this.y4-this.y)/this.speed,this.x+=this.vx,this.y+=this.vy}},{key:"draw",value:function(){this.ctx.save(),this.ctx.beginPath(),this.ctx.arc(this.x,this.y,this.radius,0,2*Math.PI,!1),this.ctx.fillStyle=this.color,this.ctx.fill(),this.ctx.restore()}}])&&r(e.prototype,n),i&&r(e,i),t}();!function(){window.addEventListener("load",(function(){o(),s(),setInterval((function(){cancelAnimationFrame(s),u()}),3e3)})),window.onresize=function(){n.width=window.innerWidth,n.height=window.innerHeight,r=[],o()};var t=document.createElement("canvas"),e=t.getContext("2d"),n=document.querySelector("#canvas"),i=n.getContext("2d"),a=0,r=[];function o(){!function(){var t=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame;window.requestAnimationFrame=t}();var i=window.innerWidth,o=window.innerHeight;t.width=i,t.height=o,e.font="bold "+i/8+"px arial",e.textAlign="center",e.baseline="middle",e.fillText("Hello World !!",i/2,o/2);var s=e.getImageData(0,0,i,o).data;n.width=i,n.height=o;for(var u=0;u<i;u+=Math.round(i/120))for(var c=0;c<o;c+=Math.round(i/120))s[4*(u+c*i)+3]>120&&r.push(new h(u,c));a=r.length}function s(){i.clearRect(0,0,n.width,n.height);for(var t=0;t<a;t++){var e=r[t];e.load(),e.draw()}requestAnimationFrame(s)}function u(){i.clearRect(0,0,n.width,n.height);for(var t=0;t<a;t++){var e=r[t];e.font(),e.draw()}requestAnimationFrame(u)}}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,