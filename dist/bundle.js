!function(t){var n={};function e(i){if(n[i])return n[i].exports;var a=n[i]={i:i,l:!1,exports:{}};return t[i].call(a.exports,a,a.exports,e),a.l=!0,a.exports}e.m=t,e.c=n,e.d=function(t,n,i){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:i})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(e.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var a in t)e.d(i,a,function(n){return t[n]}.bind(null,a));return i},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=0)}([function(t,n,e){"use strict";function i(t,n){for(var e=0;e<n.length;e++){var i=n[e];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}e.r(n);var a=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t)}var n,e,a;return n=t,a=[{key:"norm",value:function(t,n,e){return(t-n)/(e-n)}},{key:"lerp",value:function(t,n,e){return(e-n)*t+n}},{key:"map",value:function(n,e,i,a,r){return t.lerp(t.norm(n,e,i),a,r)}},{key:"clamp",value:function(t,n,e){return Math.min(Math.max(t,Math.min(n,e)),Math.max(n,e))}},{key:"distance",value:function(t,n){var e=n.x-t.x,i=n.y-t.y;return Math.sqrt(e*e+i*i)}},{key:"distanceXY",value:function(t,n,e,i){var a=e-t,r=i-n;return Math.sqrt(a*a+r*r)}},{key:"circleCollision",value:function(n,e){return t.distance(n,e)<=n.radius+e.radius}},{key:"circlePointCollision",value:function(n,e,i){return t.distanceXY(n,e,i.x,i.y)<i.radius}},{key:"pointInRect",value:function(n,e,i){return t.inRange(n,i.x,i.x+i.width)&&t.inRange(e,i.y,i.y+i.height)}},{key:"inRange",value:function(t,n,e){return t>=Math.min(n,e)&&t<=Math.max(n,e)}},{key:"rangeIntersect",value:function(t,n,e,i){return Math.max(t,n)>=Math.min(e,i)&&Math.min(t,n)<=Math.max(e,i)}},{key:"rectIntersect",value:function(n,e){return t.rangeIntersect(n.x,n.x+n.width,e.x,e.x+e.width)&&t.rangeIntersect(n.y,n.y+n.height,e.y,e.y+e.height)}},{key:"degreesToRads",value:function(t){return t/180*Math.PI}},{key:"radsToDegrees",value:function(t){return 180*t/Math.PI}},{key:"randomRange",value:function(t,n){return t+Math.random()*(n-t)}},{key:"randomInt",value:function(t,n){return Math.floor(t+Math.random()*(n-t+1))}},{key:"randomDist",value:function(n,e,i){for(var a=0,r=0;r<i;r+=1)a+=t.randomRange(n,e);return a/i}},{key:"randomColor",value:function(t){return t[Math.floor(Math.random()*t.length)]}}],(e=null)&&i(n.prototype,e),a&&i(n,a),t}();function r(t,n){for(var e=0;e<n.length;e++){var i=n[e];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}var o={};window.addEventListener("mousemove",(function(t){o.x=t.clientX,o.y=t.clientY}));var u=function(){function t(n,e){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.canvas=canvas,this.ctx=canvas.getContext("2d"),this.color="#645f5a",this.x=this.canvas.width+Math.random(),this.y=this.canvas.height+Math.random(),this.dest={x:n,y:e},this.radius=2.5*Math.random()+1,this.vx=20*(Math.random()-.5),this.vy=20*(Math.random()-.5),this.friction=.05*Math.random()+.94,this.ax=0,this.ay=0}var n,e,i;return n=t,(e=[{key:"update",value:function(){this.ax=(this.dest.x-this.x)/100,this.ay=(this.dest.x-this.y)/100,this.vx+=this.ax,this.vy+=this.ay,this.vx*=this.friction,this.vy*=this.friction,this.x+=this.vx,this.y+=this.vy,this.dist<30*this.radius&&(this.vx+=this.ax*o.x/10,this.vy+=this.ay*o.y/10)}},{key:"draw",value:function(){this.ctx.beginPath(),this.ctx.arc(this.x,this.y,this.radius,0,2*Math.PI,!1),this.ctx.fillStyle=this.color,this.dist<30*this.radius&&(this.ctx.fillStyle="#87d7f2"),this.ctx.fill()}},{key:"resize",value:function(){this.distancex=a.randomDist(this.canvas.width/12,this.canvas.width/6+150,2),this.distancey=a.randomDist(this.canvas.height/12,this.canvas.height/1.8+200,6)}},{key:"mousemove",value:function(){this.dist=a.distanceXY(this.x,this.y,o.x,o.y)}}])&&r(n.prototype,e),i&&r(n,i),t}();!function(){window.addEventListener("load",(function(){!function(){window.onresize=function(){i=n.width=window.innerWidth,a=n.height=window.innerHeight,r.forEach((function(t){t.resize()}))},function(){var t=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame;window.requestAnimationFrame=t}(),e.font="bold "+i/10+"px sans-serif",e.textAlign="center",e.baseline="middle",e.fillText("Hisami Kurita",i/2,a/2);for(var t=e.getImageData(0,0,i,a).data,s=0;s<i;s+=Math.round(i/150))for(var h=0;h<i;h+=Math.round(i/150))t[4*(s+h*i)+3]>150&&r.push(new u(s,h));o=r.length}(),s()}));var t,n=document.querySelector("#canvas"),e=n.getContext("2d"),i=n.width=window.innerWidth,a=n.height=window.innerHeight,r=[],o=0;function s(){for(var n=0;n<o;n++)(t=r[n]).update(),t.draw();requestAnimationFrame(s)}}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,