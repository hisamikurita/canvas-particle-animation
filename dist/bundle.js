!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";function r(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}n.r(e);var i=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,n,i;return e=t,i=[{key:"norm",value:function(t,e,n){return(t-e)/(n-e)}},{key:"lerp",value:function(t,e,n){return(n-e)*t+e}},{key:"map",value:function(e,n,r,i,a){return t.lerp(t.norm(e,n,r),i,a)}},{key:"clamp",value:function(t,e,n){return Math.min(Math.max(t,Math.min(e,n)),Math.max(e,n))}},{key:"distance",value:function(t,e){var n=e.x-t.x,r=e.y-t.y;return Math.sqrt(n*n+r*r)}},{key:"distanceXY",value:function(t,e,n,r){var i=n-t,a=r-e;return Math.sqrt(i*i+a*a)}},{key:"circleCollision",value:function(e,n){return t.distance(e,n)<=e.radius+n.radius}},{key:"circlePointCollision",value:function(e,n,r){return t.distanceXY(e,n,r.x,r.y)<r.radius}},{key:"pointInRect",value:function(e,n,r){return t.inRange(e,r.x,r.x+r.width)&&t.inRange(n,r.y,r.y+r.height)}},{key:"inRange",value:function(t,e,n){return t>=Math.min(e,n)&&t<=Math.max(e,n)}},{key:"rangeIntersect",value:function(t,e,n,r){return Math.max(t,e)>=Math.min(n,r)&&Math.min(t,e)<=Math.max(n,r)}},{key:"rectIntersect",value:function(e,n){return t.rangeIntersect(e.x,e.x+e.width,n.x,n.x+n.width)&&t.rangeIntersect(e.y,e.y+e.height,n.y,n.y+n.height)}},{key:"degreesToRads",value:function(t){return t/180*Math.PI}},{key:"radsToDegrees",value:function(t){return 180*t/Math.PI}},{key:"randomRange",value:function(t,e){return t+Math.random()*(e-t)}},{key:"randomInt",value:function(t,e){return Math.floor(t+Math.random()*(e-t+1))}},{key:"randomDist",value:function(e,n,r){for(var i=0,a=0;a<r;a+=1)i+=t.randomRange(e,n);return i/r}},{key:"randomColor",value:function(t){return t[Math.floor(Math.random()*t.length)]}}],(n=null)&&r(e.prototype,n),i&&r(e,i),t}();function a(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var o={},u=["#607D8B","#FFF3E0","#0097A7"];window.addEventListener("mousemove",(function(t){o.x=t.clientX,o.y=t.clientY}));var c=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.canvas=document.querySelector("#canvas"),this.ctx=canvas.getContext("2d"),this.color=i.randomColor(u),this.x=Math.random()*this.canvas.width,this.y=Math.random()*this.canvas.height,this.radius=10*Math.random()+10,this.ax=0,this.ay=0,this.friction=.05*Math.random()+.94,this.dest={x:e,y:n}}var e,n,r;return e=t,(n=[{key:"update",value:function(){this.ax=(this.dest.x-this.x)/30,this.ay=(this.dest.y-this.y)/30,this.x+=this.ax,this.y+=this.ay}},{key:"draw",value:function(){this.ctx.save(),this.ctx.beginPath(),this.ctx.arc(this.x,this.y,this.radius,0,2*Math.PI,!1),this.ctx.fillStyle=this.color,this.dist<10*this.radius&&(this.ctx.fillStyle="#87d7f2"),this.ctx.globalAlpha=.8,this.ctx.fill(),this.ctx.restore()}},{key:"resize",value:function(){this.x=this.x,this.y=this.y}}])&&a(e.prototype,n),r&&a(e,r),t}();!function(){window.addEventListener("load",(function(){o(),u()})),window.onresize=function(){n.width=window.innerWidth,n.height=window.innerHeight;for(var t=0;t<i;t++){a[t].pop()}o()};var t=document.createElement("canvas"),e=t.getContext("2d"),n=document.querySelector("#canvas"),r=n.getContext("2d"),i=0,a=[];function o(){!function(){var t=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame;window.requestAnimationFrame=t}();var r=window.innerWidth,o=window.innerHeight;t.width=r,t.height=o,e.font="bold "+r/8+"px arial",e.textAlign="center",e.baseline="middle",e.fillText("Hello World !!",r/2,o/2);var u=e.getImageData(0,0,r,o).data;n.width=r,n.height=o;for(var s=0;s<r;s+=Math.round(r/100))for(var l=0;l<o;l+=Math.round(r/100))u[4*(s+l*r)+3]>100&&a.push(new c(s,l));i=a.length}function u(){r.clearRect(0,0,n.width,n.height);for(var t=0;t<i;t++){var e=a[t];e.update(),e.draw()}requestAnimationFrame(u)}}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhcnRpY2xlLmpzIiwid2VicGFjazovLy8uL3NyYy9tYWluLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiVXRpbHMiLCJtaW4iLCJtYXgiLCJub3JtIiwic291cmNlTWluIiwic291cmNlTWF4IiwiZGVzdE1pbiIsImRlc3RNYXgiLCJsZXJwIiwiTWF0aCIsInAwIiwicDEiLCJkeCIsIngiLCJkeSIsInkiLCJzcXJ0IiwieDAiLCJ5MCIsIngxIiwieTEiLCJjMCIsImMxIiwiZGlzdGFuY2UiLCJyYWRpdXMiLCJjaXJjbGUiLCJkaXN0YW5jZVhZIiwicmVjdCIsImluUmFuZ2UiLCJ3aWR0aCIsImhlaWdodCIsIm1pbjAiLCJtYXgwIiwibWluMSIsIm1heDEiLCJyMCIsInIxIiwicmFuZ2VJbnRlcnNlY3QiLCJkZWdyZWVzIiwiUEkiLCJyYWRpYW5zIiwicmFuZG9tIiwiZmxvb3IiLCJpdGVyYXRpb25zIiwidG90YWwiLCJyYW5kb21SYW5nZSIsImNvbG9ycyIsImxlbmd0aCIsIm1vdXNlIiwid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50IiwiY2xpZW50WCIsImNsaWVudFkiLCJQYXJ0aWNsZSIsInRoaXMiLCJjYW52YXMiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJjdHgiLCJnZXRDb250ZXh0IiwiY29sb3IiLCJyYW5kb21Db2xvciIsImF4IiwiYXkiLCJmcmljdGlvbiIsImRlc3QiLCJzYXZlIiwiYmVnaW5QYXRoIiwiYXJjIiwiZmlsbFN0eWxlIiwiZGlzdCIsImdsb2JhbEFscGhhIiwiZmlsbCIsInJlc3RvcmUiLCJpbml0IiwicmVuZGVyIiwib25yZXNpemUiLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJhbW91bnQiLCJwYXJ0aWNsZXMiLCJwb3AiLCJvZmZzY3JlZW5jYW52YXMiLCJjcmVhdGVFbGVtZW50Iiwib2Zmc2NyZWVuY3R4IiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwid2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibXNSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJXSURUSCIsIkhFSUdIVCIsImZvbnQiLCJ0ZXh0QWxpZ24iLCJiYXNlbGluZSIsImZpbGxUZXh0IiwiaW1nRGF0YSIsImdldEltYWdlRGF0YSIsImRhdGEiLCJyb3VuZCIsInB1c2giLCJjbGVhclJlY3QiLCJ1cGRhdGUiLCJkcmF3Il0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1D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QUFRTyxLQUUvRDFDLEVBQU8zQixNQUFRNkQsRUFDZmxDLEVBQU8xQixPQUFTNkQsRUFHaEIsSUFEQSxJQUNTOUUsRUFBSSxFQUFHQSxFQUFJNkUsRUFBTzdFLEdBQUtKLEtBQUswRixNQUFNVCxFQUQ5QixLQUVULElBQUssSUFBSTNFLEVBQUksRUFBR0EsRUFBSTRFLEVBQVE1RSxHQUFLTixLQUFLMEYsTUFBTVQsRUFGbkMsS0FHRE0sRUFBMkIsR0FBakJuRixFQUFJRSxFQUFJMkUsR0FBYyxHQUgvQixLQUlEVCxFQUFVbUIsS0FBSyxJQUFJOUMsRUFBU3pDLEVBQUdFLElBSTNDaUUsRUFBU0MsRUFBVWxDLE9BR3ZCLFNBQVM2QixJQUNMakIsRUFBSTBDLFVBQVUsRUFBRyxFQUFHN0MsRUFBTzNCLE1BQU8yQixFQUFPMUIsUUFDekMsSUFBSyxJQUFJOUQsRUFBSSxFQUFHQSxFQUFJZ0gsRUFBUWhILElBQUssQ0FDN0IsSUFBSThCLEVBQUltRixFQUFVakgsR0FDbEI4QixFQUFFd0csU0FDRnhHLEVBQUV5RyxPQUVOakIsc0JBQXNCVixJQXBFOUIiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuIiwiZXhwb3J0IGNsYXNzIFV0aWxzIHtcclxuICAgIHN0YXRpYyBub3JtKHZhbHVlLCBtaW4sIG1heCkge1xyXG4gICAgICAgIHJldHVybiAodmFsdWUgLSBtaW4pIC8gKG1heCAtIG1pbik7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgbGVycChub3JtLCBtaW4sIG1heCkge1xyXG4gICAgICAgIHJldHVybiAobWF4IC0gbWluKSAqIG5vcm0gKyBtaW47XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgbWFwKHZhbHVlLCBzb3VyY2VNaW4sIHNvdXJjZU1heCwgZGVzdE1pbiwgZGVzdE1heCkge1xyXG4gICAgICAgIHJldHVybiBVdGlscy5sZXJwKFV0aWxzLm5vcm0odmFsdWUsIHNvdXJjZU1pbiwgc291cmNlTWF4KSwgZGVzdE1pbiwgZGVzdE1heCk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGNsYW1wKHZhbHVlLCBtaW4sIG1heCkge1xyXG4gICAgICAgIHJldHVybiBNYXRoLm1pbihNYXRoLm1heCh2YWx1ZSwgTWF0aC5taW4obWluLCBtYXgpKSwgTWF0aC5tYXgobWluLCBtYXgpKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZGlzdGFuY2UocDAsIHAxKSB7XHJcbiAgICAgICAgdmFyIGR4ID0gcDEueCAtIHAwLngsXHJcbiAgICAgICAgICAgIGR5ID0gcDEueSAtIHAwLnk7XHJcbiAgICAgICAgcmV0dXJuIE1hdGguc3FydChkeCAqIGR4ICsgZHkgKiBkeSk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGRpc3RhbmNlWFkoeDAsIHkwLCB4MSwgeTEpIHtcclxuICAgICAgICB2YXIgZHggPSB4MSAtIHgwLFxyXG4gICAgICAgICAgICBkeSA9IHkxIC0geTA7XHJcbiAgICAgICAgcmV0dXJuIE1hdGguc3FydChkeCAqIGR4ICsgZHkgKiBkeSk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGNpcmNsZUNvbGxpc2lvbihjMCwgYzEpIHtcclxuICAgICAgICByZXR1cm4gVXRpbHMuZGlzdGFuY2UoYzAsIGMxKSA8PSBjMC5yYWRpdXMgKyBjMS5yYWRpdXM7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGNpcmNsZVBvaW50Q29sbGlzaW9uKHgsIHksIGNpcmNsZSkge1xyXG4gICAgICAgIHJldHVybiBVdGlscy5kaXN0YW5jZVhZKHgsIHksIGNpcmNsZS54LCBjaXJjbGUueSkgPCBjaXJjbGUucmFkaXVzO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBwb2ludEluUmVjdCh4LCB5LCByZWN0KSB7XHJcbiAgICAgICAgcmV0dXJuIFV0aWxzLmluUmFuZ2UoeCwgcmVjdC54LCByZWN0LnggKyByZWN0LndpZHRoKSAmJlxyXG4gICAgICAgICAgICBVdGlscy5pblJhbmdlKHksIHJlY3QueSwgcmVjdC55ICsgcmVjdC5oZWlnaHQpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBpblJhbmdlKHZhbHVlLCBtaW4sIG1heCkge1xyXG4gICAgICAgIHJldHVybiB2YWx1ZSA+PSBNYXRoLm1pbihtaW4sIG1heCkgJiYgdmFsdWUgPD0gTWF0aC5tYXgobWluLCBtYXgpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyByYW5nZUludGVyc2VjdChtaW4wLCBtYXgwLCBtaW4xLCBtYXgxKSB7XHJcbiAgICAgICAgcmV0dXJuIE1hdGgubWF4KG1pbjAsIG1heDApID49IE1hdGgubWluKG1pbjEsIG1heDEpICYmXHJcbiAgICAgICAgICAgIE1hdGgubWluKG1pbjAsIG1heDApIDw9IE1hdGgubWF4KG1pbjEsIG1heDEpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyByZWN0SW50ZXJzZWN0KHIwLCByMSkge1xyXG4gICAgICAgIHJldHVybiBVdGlscy5yYW5nZUludGVyc2VjdChyMC54LCByMC54ICsgcjAud2lkdGgsIHIxLngsIHIxLnggKyByMS53aWR0aCkgJiZcclxuICAgICAgICAgICAgVXRpbHMucmFuZ2VJbnRlcnNlY3QocjAueSwgcjAueSArIHIwLmhlaWdodCwgcjEueSwgcjEueSArIHIxLmhlaWdodCk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGRlZ3JlZXNUb1JhZHMoZGVncmVlcykge1xyXG4gICAgICAgIHJldHVybiBkZWdyZWVzIC8gMTgwICogTWF0aC5QSTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgcmFkc1RvRGVncmVlcyhyYWRpYW5zKSB7XHJcbiAgICAgICAgcmV0dXJuIHJhZGlhbnMgKiAxODAgLyBNYXRoLlBJO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyByYW5kb21SYW5nZShtaW4sIG1heCkge1xyXG4gICAgICAgIHJldHVybiBtaW4gKyBNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbik7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHJhbmRvbUludChtaW4sIG1heCkge1xyXG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKG1pbiArIE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgMSkpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyByYW5kb21EaXN0KG1pbiwgbWF4LCBpdGVyYXRpb25zKSB7XHJcbiAgICAgICAgdmFyIHRvdGFsID0gMDtcclxuXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpdGVyYXRpb25zOyBpICs9IDEpIHtcclxuICAgICAgICAgICAgdG90YWwgKz0gVXRpbHMucmFuZG9tUmFuZ2UobWluLCBtYXgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdG90YWwgLyBpdGVyYXRpb25zO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyByYW5kb21Db2xvcihjb2xvcnMpIHtcclxuICAgICAgICByZXR1cm4gY29sb3JzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGNvbG9ycy5sZW5ndGgpXVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgVXRpbHMgfSBmcm9tICcuL3V0aWwnO1xyXG5cclxuY29uc3QgbW91c2UgPSB7fTtcclxuY29uc3QgY29sb3JzID0gWycjNjA3RDhCJywgJyNGRkYzRTAnLCAnIzAwOTdBNyddO1xyXG5cclxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gIG1vdXNlLnggPSBldmVudC5jbGllbnRYO1xyXG4gIG1vdXNlLnkgPSBldmVudC5jbGllbnRZO1xyXG59KVxyXG5cclxuZXhwb3J0IGNsYXNzIFBhcnRpY2xlIHtcclxuICBjb25zdHJ1Y3Rvcih4LCB5KSB7XHJcbiAgICB0aGlzLmNhbnZhcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNjYW52YXMnKTtcclxuICAgIHRoaXMuY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcclxuICAgIHRoaXMuY29sb3IgPSBVdGlscy5yYW5kb21Db2xvcihjb2xvcnMpO1xyXG4gICAgdGhpcy54ID0gTWF0aC5yYW5kb20oKSAqIHRoaXMuY2FudmFzLndpZHRoO1xyXG4gICAgdGhpcy55ID0gTWF0aC5yYW5kb20oKSAqIHRoaXMuY2FudmFzLmhlaWdodDtcclxuICAgIHRoaXMucmFkaXVzID0gTWF0aC5yYW5kb20oKSAqIDEwICsgMTA7XHJcbiAgICB0aGlzLmF4ID0gMDtcclxuICAgIHRoaXMuYXkgPSAwO1xyXG4gICAgdGhpcy5mcmljdGlvbiA9IE1hdGgucmFuZG9tKCkgKiAwLjA1ICsgMC45NDtcclxuICAgIHRoaXMuZGVzdCA9IHtcclxuICAgICAgeDogeCxcclxuICAgICAgeTogeSxcclxuICAgIH1cclxuICB9XHJcbiAgdXBkYXRlKCkge1xyXG4gICAgdGhpcy5heCA9ICh0aGlzLmRlc3QueCAtIHRoaXMueCkgLyAzMDtcclxuICAgIHRoaXMuYXkgPSAodGhpcy5kZXN0LnkgLSB0aGlzLnkpIC8gMzA7XHJcbiAgICB0aGlzLnggKz0gdGhpcy5heDtcclxuICAgIHRoaXMueSArPSB0aGlzLmF5O1xyXG4gIH1cclxuICBkcmF3KCkge1xyXG4gICAgdGhpcy5jdHguc2F2ZSgpO1xyXG4gICAgdGhpcy5jdHguYmVnaW5QYXRoKCk7XHJcbiAgICB0aGlzLmN0eC5hcmModGhpcy54LCB0aGlzLnksIHRoaXMucmFkaXVzLCAwLCBNYXRoLlBJICogMiwgZmFsc2UpO1xyXG4gICAgdGhpcy5jdHguZmlsbFN0eWxlID0gdGhpcy5jb2xvcjtcclxuICAgIGlmICh0aGlzLmRpc3QgPCB0aGlzLnJhZGl1cyAqIDEwKSB7XHJcbiAgICAgIHRoaXMuY3R4LmZpbGxTdHlsZSA9ICcjODdkN2YyJztcclxuICAgIH1cclxuICAgIHRoaXMuY3R4Lmdsb2JhbEFscGhhID0gLjg7XHJcbiAgICB0aGlzLmN0eC5maWxsKClcclxuICAgIHRoaXMuY3R4LnJlc3RvcmUoKTtcclxuICB9XHJcbiAgcmVzaXplKCkge1xyXG4gICAgdGhpcy54ID0gdGhpcy54O1xyXG4gICAgdGhpcy55ID0gdGhpcy55O1xyXG4gIH1cclxufSIsImltcG9ydCB7IFBhcnRpY2xlIH0gZnJvbSAnLi9wYXJ0aWNsZSc7XHJcbmltcG9ydCB7IFV0aWxzIH0gZnJvbSAnLi91dGlsJztcclxuXHJcbigoKSA9PiB7XHJcblxyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaW5pdCgpO1xyXG4gICAgICAgIHJlbmRlcigpO1xyXG4gICAgfSlcclxuXHJcbiAgICB3aW5kb3cub25yZXNpemUgPSAoKSA9PiB7XHJcbiAgICAgICAgY2FudmFzLndpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XHJcbiAgICAgICAgY2FudmFzLmhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFtb3VudDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCBwID0gcGFydGljbGVzW2ldO1xyXG4gICAgICAgICAgICBwLnBvcCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpbml0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qgb2Zmc2NyZWVuY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyksXHJcbiAgICAgICAgb2Zmc2NyZWVuY3R4ID0gb2Zmc2NyZWVuY2FudmFzLmdldENvbnRleHQoJzJkJyksXHJcbiAgICAgICAgY2FudmFzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2NhbnZhcycpLFxyXG4gICAgICAgIGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xyXG5cclxuICAgIGxldCBhbW91bnQgPSAwLCBwYXJ0aWNsZXMgPSBbXTtcclxuXHJcbiAgICBmdW5jdGlvbiBpbml0KCkge1xyXG5cclxuICAgICAgICAvLyBSZXF1ZXN0QW5pbWF0aW9uRnJhbWVcclxuICAgICAgICAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBjb25zdCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XHJcbiAgICAgICAgICAgICAgICB3aW5kb3cubW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XHJcbiAgICAgICAgICAgICAgICB3aW5kb3cud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XHJcbiAgICAgICAgICAgICAgICB3aW5kb3cubXNSZXF1ZXN0QW5pbWF0aW9uRnJhbWU7XHJcbiAgICAgICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWU7XHJcbiAgICAgICAgfSkoKTtcclxuXHJcbiAgICAgICAgY29uc3QgV0lEVEggPSB3aW5kb3cuaW5uZXJXaWR0aDtcclxuICAgICAgICBjb25zdCBIRUlHSFQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XHJcblxyXG4gICAgICAgIG9mZnNjcmVlbmNhbnZhcy53aWR0aCA9IFdJRFRIO1xyXG4gICAgICAgIG9mZnNjcmVlbmNhbnZhcy5oZWlnaHQgPSBIRUlHSFQ7XHJcblxyXG4gICAgICAgIG9mZnNjcmVlbmN0eC5mb250ID0gXCJib2xkIFwiICsgKFdJRFRIIC8gOCkgKyBcInB4IGFyaWFsXCI7XHJcbiAgICAgICAgb2Zmc2NyZWVuY3R4LnRleHRBbGlnbiA9ICdjZW50ZXInO1xyXG4gICAgICAgIG9mZnNjcmVlbmN0eC5iYXNlbGluZSA9ICdtaWRkbGUnO1xyXG4gICAgICAgIG9mZnNjcmVlbmN0eC5maWxsVGV4dCgnSGVsbG8gV29ybGQgISEnLCBXSURUSCAvIDIsIEhFSUdIVCAvIDIpO1xyXG4gICAgICAgIGNvbnN0IGltZ0RhdGEgPSBvZmZzY3JlZW5jdHguZ2V0SW1hZ2VEYXRhKDAsIDAsIFdJRFRILCBIRUlHSFQpLmRhdGE7XHJcblxyXG4gICAgICAgIGNhbnZhcy53aWR0aCA9IFdJRFRIO1xyXG4gICAgICAgIGNhbnZhcy5oZWlnaHQgPSBIRUlHSFQ7XHJcblxyXG4gICAgICAgIGNvbnN0IHNraXAgPSAxMDA7XHJcbiAgICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCBXSURUSDsgeCArPSBNYXRoLnJvdW5kKFdJRFRIIC8gc2tpcCkpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgeSA9IDA7IHkgPCBIRUlHSFQ7IHkgKz0gTWF0aC5yb3VuZChXSURUSCAvIHNraXApKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW1nRGF0YVsoKHggKyB5ICogV0lEVEgpICogNCkgKyAzXSA+IHNraXApIHtcclxuICAgICAgICAgICAgICAgICAgICBwYXJ0aWNsZXMucHVzaChuZXcgUGFydGljbGUoeCwgeSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGFtb3VudCA9IHBhcnRpY2xlcy5sZW5ndGg7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcmVuZGVyKCkge1xyXG4gICAgICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFtb3VudDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCBwID0gcGFydGljbGVzW2ldO1xyXG4gICAgICAgICAgICBwLnVwZGF0ZSgpO1xyXG4gICAgICAgICAgICBwLmRyYXcoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJlbmRlcik7XHJcbiAgICB9XHJcbn0pKCk7Il0sInNvdXJjZVJvb3QiOiIifQ==