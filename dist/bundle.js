!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";function r(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}n.r(e);var i=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,n,i;return e=t,i=[{key:"norm",value:function(t,e,n){return(t-e)/(n-e)}},{key:"lerp",value:function(t,e,n){return(n-e)*t+e}},{key:"map",value:function(e,n,r,i,a){return t.lerp(t.norm(e,n,r),i,a)}},{key:"clamp",value:function(t,e,n){return Math.min(Math.max(t,Math.min(e,n)),Math.max(e,n))}},{key:"distance",value:function(t,e){var n=e.x-t.x,r=e.y-t.y;return Math.sqrt(n*n+r*r)}},{key:"distanceXY",value:function(t,e,n,r){var i=n-t,a=r-e;return Math.sqrt(i*i+a*a)}},{key:"circleCollision",value:function(e,n){return t.distance(e,n)<=e.radius+n.radius}},{key:"circlePointCollision",value:function(e,n,r){return t.distanceXY(e,n,r.x,r.y)<r.radius}},{key:"pointInRect",value:function(e,n,r){return t.inRange(e,r.x,r.x+r.width)&&t.inRange(n,r.y,r.y+r.height)}},{key:"inRange",value:function(t,e,n){return t>=Math.min(e,n)&&t<=Math.max(e,n)}},{key:"rangeIntersect",value:function(t,e,n,r){return Math.max(t,e)>=Math.min(n,r)&&Math.min(t,e)<=Math.max(n,r)}},{key:"rectIntersect",value:function(e,n){return t.rangeIntersect(e.x,e.x+e.width,n.x,n.x+n.width)&&t.rangeIntersect(e.y,e.y+e.height,n.y,n.y+n.height)}},{key:"degreesToRads",value:function(t){return t/180*Math.PI}},{key:"radsToDegrees",value:function(t){return 180*t/Math.PI}},{key:"randomRange",value:function(t,e){return t+Math.random()*(e-t)}},{key:"randomInt",value:function(t,e){return Math.floor(t+Math.random()*(e-t+1))}},{key:"randomDist",value:function(e,n,r){for(var i=0,a=0;a<r;a+=1)i+=t.randomRange(e,n);return i/r}},{key:"randomColor",value:function(t){return t[Math.floor(Math.random()*t.length)]}}],(n=null)&&r(e.prototype,n),i&&r(e,i),t}();function a(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var o={},u=["#607D8B","#FFF3E0","#0097A7"];window.addEventListener("mousemove",(function(t){o.x=t.clientX,o.y=t.clientY}));var c=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.canvas=document.querySelector("#canvas"),this.ctx=canvas.getContext("2d"),this.color=i.randomColor(u),this.x=Math.random()*this.canvas.width,this.y=Math.random()*this.canvas.height,this.radius=10*Math.random()+10,this.ax=0,this.ay=0,this.friction=.05*Math.random()+.94,this.dest={x:e,y:n}}var e,n,r;return e=t,(n=[{key:"update",value:function(){this.ax=(this.dest.x-this.x)/30,this.ay=(this.dest.y-this.y)/30,this.x+=this.ax,this.y+=this.ay}},{key:"draw",value:function(){this.ctx.save(),this.ctx.beginPath(),this.ctx.arc(this.x,this.y,this.radius,0,2*Math.PI,!1),this.ctx.fillStyle=this.color,this.dist<10*this.radius&&(this.ctx.fillStyle="#87d7f2"),this.ctx.globalAlpha=.8,this.ctx.fill(),this.ctx.restore()}},{key:"resize",value:function(){this.x=this.x,this.y=this.y}}])&&a(e.prototype,n),r&&a(e,r),t}();!function(){window.addEventListener("load",(function(){!function(){!function(){var t=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame;window.requestAnimationFrame=t}();var t=window.innerWidth,i=window.innerHeight;e.width=t,e.height=i,n.font="bold "+t/8+"px arial",n.textAlign="center",n.baseline="middle",n.fillText("Hello World !!",t/2,i/2);var u=n.getImageData(0,0,t,i).data;r.width=t,r.height=i;for(var s=0;s<t;s+=Math.round(t/100))for(var l=0;l<i;l+=Math.round(t/100))u[4*(s+l*t)+3]>100&&a.push(new c(s,l));o=a.length}(),u()})),window.onresize=function(){r.width=window.innerWidth,r.height=window.innerHeight};var t,e=document.createElement("canvas"),n=e.getContext("2d"),r=document.querySelector("#canvas"),i=r.getContext("2d"),a=[],o=0;function u(){i.clearRect(0,0,r.width,r.height);for(var e=0;e<o;e++)(t=a[e]).update(),t.draw();requestAnimationFrame(u)}}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,